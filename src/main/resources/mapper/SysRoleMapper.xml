<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pxx.collegecourseselectionsystem.mapper.SysRoleMapper">
    <resultMap id="BaseResultMap" type="com.pxx.collegecourseselectionsystem.entity.SysRoleEntity">
        <!--@mbg.generated-->
        <!--@Table sys_role-->
        <id column="role_id" jdbcType="BIGINT" property="roleId"/>
        <result column="role_name" jdbcType="VARCHAR" property="roleName"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
        <result column="REVISION" jdbcType="INTEGER" property="revision"/>
        <result column="created_by" jdbcType="VARCHAR" property="createdBy"/>
        <result column="created_time" jdbcType="TIMESTAMP" property="createdTime"/>
        <result column="updated_by" jdbcType="VARCHAR" property="updatedBy"/>
        <result column="updated_time" jdbcType="TIMESTAMP" property="updatedTime"/>
        <collection property="sysMenuEntities" ofType="com.pxx.collegecourseselectionsystem.entity.SysMenuEntity">
            <id column="menu_id" jdbcType="INTEGER" property="menuId"/>
            <result column="name" jdbcType="VARCHAR" property="name"/>
            <result column="parent_id" jdbcType="INTEGER" property="parentId"/>
            <result column="perms" jdbcType="VARCHAR" property="perms"/>
        </collection>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        role_id, role_name, remark, REVISION, created_by, created_time, updated_by, updated_time
    </sql>
    <update id="updateBatch" parameterType="java.util.List">
        <!--@mbg.generated-->
        update sys_role
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="role_name = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when role_id = #{item.roleId,jdbcType=BIGINT} then #{item.roleName,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="remark = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when role_id = #{item.roleId,jdbcType=BIGINT} then #{item.remark,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="REVISION = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when role_id = #{item.roleId,jdbcType=BIGINT} then #{item.revision,jdbcType=INTEGER}
                </foreach>
            </trim>
            <trim prefix="created_by = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when role_id = #{item.roleId,jdbcType=BIGINT} then #{item.createdBy,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="created_time = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when role_id = #{item.roleId,jdbcType=BIGINT} then #{item.createdTime,jdbcType=TIMESTAMP}
                </foreach>
            </trim>
            <trim prefix="updated_by = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when role_id = #{item.roleId,jdbcType=BIGINT} then #{item.updatedBy,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="updated_time = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when role_id = #{item.roleId,jdbcType=BIGINT} then #{item.updatedTime,jdbcType=TIMESTAMP}
                </foreach>
            </trim>
        </trim>
        where role_id in
        <foreach close=")" collection="list" item="item" open="(" separator=", ">
            #{item.roleId,jdbcType=BIGINT}
        </foreach>
    </update>
    <insert id="batchInsert" keyColumn="role_id" keyProperty="roleId" parameterType="map" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into sys_role
                (role_name, remark, REVISION, created_by, created_time, updated_by, updated_time)
                values
        <foreach collection="list" item="item" separator=",">
            (#{item.roleName,jdbcType=VARCHAR}, #{item.remark,jdbcType=VARCHAR}, #{item.revision,jdbcType=INTEGER},
             #{item.createdBy,jdbcType=VARCHAR}, #{item.createdTime,jdbcType=TIMESTAMP},
             #{item.updatedBy,jdbcType=VARCHAR},
             #{item.updatedTime,jdbcType=TIMESTAMP})
        </foreach>
    </insert>
    <insert id="insertOrUpdate" keyColumn="role_id" keyProperty="roleId"
            parameterType="com.pxx.collegecourseselectionsystem.entity.SysRoleEntity" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into sys_role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="roleId != null">
                role_id,
            </if>
            role_name,
            remark,
            REVISION,
            created_by,
            created_time,
            updated_by,
            updated_time,
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="roleId != null">
                #{roleId,jdbcType=BIGINT},
            </if>
            #{roleName,jdbcType=VARCHAR},
            #{remark,jdbcType=VARCHAR},
            #{revision,jdbcType=INTEGER},
            #{createdBy,jdbcType=VARCHAR},
            #{createdTime,jdbcType=TIMESTAMP},
            #{updatedBy,jdbcType=VARCHAR},
            #{updatedTime,jdbcType=TIMESTAMP},
        </trim>
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="roleId != null">
                role_id = #{roleId,jdbcType=BIGINT},
            </if>
            role_name    = #{roleName,jdbcType=VARCHAR},
            remark       = #{remark,jdbcType=VARCHAR},
            REVISION     = #{revision,jdbcType=INTEGER},
            created_by   = #{createdBy,jdbcType=VARCHAR},
            created_time = #{createdTime,jdbcType=TIMESTAMP},
            updated_by   = #{updatedBy,jdbcType=VARCHAR},
            updated_time = #{updatedTime,jdbcType=TIMESTAMP},
        </trim>
    </insert>
    <insert id="insertOrUpdateSelective" keyColumn="role_id" keyProperty="roleId"
            parameterType="com.pxx.collegecourseselectionsystem.entity.SysRoleEntity" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into sys_role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="roleId != null">
                role_id,
            </if>
            <if test="roleName != null">
                role_name,
            </if>
            <if test="remark != null">
                remark,
            </if>
            <if test="revision != null">
                REVISION,
            </if>
            <if test="createdBy != null">
                created_by,
            </if>
            <if test="createdTime != null">
                created_time,
            </if>
            <if test="updatedBy != null">
                updated_by,
            </if>
            <if test="updatedTime != null">
                updated_time,
            </if>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="roleId != null">
                #{roleId,jdbcType=BIGINT},
            </if>
            <if test="roleName != null">
                #{roleName,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="revision != null">
                #{revision,jdbcType=INTEGER},
            </if>
            <if test="createdBy != null">
                #{createdBy,jdbcType=VARCHAR},
            </if>
            <if test="createdTime != null">
                #{createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedBy != null">
                #{updatedBy,jdbcType=VARCHAR},
            </if>
            <if test="updatedTime != null">
                #{updatedTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="roleId != null">
                role_id = #{roleId,jdbcType=BIGINT},
            </if>
            <if test="roleName != null">
                role_name = #{roleName,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="revision != null">
                REVISION = #{revision,jdbcType=INTEGER},
            </if>
            <if test="createdBy != null">
                created_by = #{createdBy,jdbcType=VARCHAR},
            </if>
            <if test="createdTime != null">
                created_time = #{createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedBy != null">
                updated_by = #{updatedBy,jdbcType=VARCHAR},
            </if>
            <if test="updatedTime != null">
                updated_time = #{updatedTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>

    <select id="findRoleByUserId" resultMap="BaseResultMap">
        select sr.role_id, sr.role_name
        from sys_role sr
                     left join sys_user_role sur on sr.role_id = sur.role_id
                     left join sys_user su on sur.user_id = su.user_id
        where su.user_id = #{userId,jdbcType=BIGINT}
    </select>

    <select id="findRoleInfoByRoleId" resultMap="BaseResultMap">
        select sr.role_id, sr.role_name, sr.remark, sr.REVISION, sm.menu_id, sm.name, sm.perms,sm.parent_id
        from sys_role sr
                     left join sys_role_menu srm on sr.role_id = srm.role_id
                     left join sys_menu sm on srm.menu_id = sm.menu_id
    </select>
</mapper>